pthread_create

目录

    函数简介
    展开

    函数简介
    展开

编辑本段函数简介
　　pthread_create是UNIX环境创建线程函数
头文件
　　#include<pthread.h>
函数声明
　　int pthread_create(pthread_t*restrict tidp,const pthread_attr_t *restrict_attr,void*（*start_rtn)(void*),void *restrict arg);
返回值
　　若成功则返回0，否则返回出错编号
　　返回成功时，由tidp指向的内存单元被设置为新创建线程的线程ID。attr参数用于制定各种不同的线程属性。新创建的线程从start_rtn函数的地址开始运行，该函数只有一个万能指针参数arg，如果需要向start_rtn函数传递的参数不止一个，那么需要把这些参数放到一个结构中，然后把这个结构的地址作为arg的参数传入。
　　linux下用C开发多线程程序，Linux系统下的多线程遵循POSIX线程接口，称为pthread。
　　由 restrict 修饰的指针是最初唯一对指针所指向的对象进行存取的方法，仅当第二个指针基于第一个时，才能对对象进行存取。对对象的存取都限定于基于由 restrict 修饰的指针表达式中。 由 restrict 修饰的指针主要用于函数形参，或指向由 malloc() 分配的内存空间。restrict 数据类型不改变程序的语义。 编译器能通过作出 restrict 修饰的指针是存取对象的唯一方法的假设，更好地优化某些类型的例程。
参数
　　第一个参数为指向线程标识符的指针。
　　第二个参数用来设置线程属性。
　　第三个参数是线程运行函数的起始地址。
　　最后一个参数是运行函数的参数。
　　另外，在编译时注意加上-lpthread参数，以调用静态链接库。因为pthread并非Linux系统的默认库
示例
　　打印线程 IDs
　　#include <pthread.h>
　　#include <stdlib.h>
　　#include <stdio.h>
　　#include <unistd.h>
　　#include <string.h>
　　pthread_t ntid;
　　void printids(const char *s)
　　{
　　pid_t pid;
　　pthread_t tid;
　　pid = getpid();
　　tid = pthread_self();
　　printf("%s pid %u tid %u (0x%x)\n", s,
　　(unsigned int)pid, (unsigned int)tid, (unsigned int)tid);
　　} void *thr_fn(void *arg)
　　{
　　printids("new thread: ");
　　return((void *)0);
　　}
　　int main(void)
　　{
　　int err;
　　err = pthread_create(&ntid, NULL, thr_fn, NULL);
　　if (err != 0)
　　printf("can't create thread: %s\n", strerror(err));
　　printids("main thread:");
　　sleep(1);
　　exit(0);
　　}
　　$ gcc main.c -lpthread
　　$ ./a.out
　　main thread: pid 7398 tid 3084450496 (0xb7d8fac0)
　　new thread: pid 7398 tid 3084446608 (0xb7d8eb90)